/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {}

export interface NexusGenEnums {}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
}

export interface NexusGenRootTypes {
  Page: {
    // root type
    id: string; // String!
    siteId: string; // String!
    url: string; // String!
  };
  Query: {};
  Screenshot: {
    // root type
    id: string; // String!
    image: string; // String!
    pageId: string; // String!
  };
  Site: {
    // root type
    id: string; // String!
    name: string; // String!
  };
  User: {
    // root type
    email: string; // String!
    id: string; // String!
  };
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  String: NexusGenScalars["String"];
  Int: NexusGenScalars["Int"];
  Float: NexusGenScalars["Float"];
  Boolean: NexusGenScalars["Boolean"];
  ID: NexusGenScalars["ID"];
}

export interface NexusGenFieldTypes {
  Page: {
    // field return type
    id: string; // String!
    screenshots: NexusGenRootTypes["Screenshot"] | null; // Screenshot
    site: NexusGenRootTypes["Site"]; // Site!
    siteId: string; // String!
    url: string; // String!
  };
  Query: {
    // field return type
    site: NexusGenRootTypes["Site"]; // Site!
  };
  Screenshot: {
    // field return type
    id: string; // String!
    image: string; // String!
    page: NexusGenRootTypes["Page"]; // Page!
    pageId: string; // String!
  };
  Site: {
    // field return type
    id: string; // String!
    name: string; // String!
    pages: NexusGenRootTypes["Page"] | null; // Page
  };
  User: {
    // field return type
    email: string; // String!
    id: string; // String!
  };
}

export interface NexusGenArgTypes {
  Query: {
    site: {
      // args
      postId: string; // String!
    };
  };
}

export interface NexusGenAbstractResolveReturnTypes {}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames =
  | "Page"
  | "Query"
  | "Screenshot"
  | "Site"
  | "User";

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes["inputNames"]
    | NexusGenTypes["enumNames"]
    | NexusGenTypes["scalarNames"];
  allOutputTypes:
    | NexusGenTypes["objectNames"]
    | NexusGenTypes["enumNames"]
    | NexusGenTypes["unionNames"]
    | NexusGenTypes["interfaceNames"]
    | NexusGenTypes["scalarNames"];
  allNamedTypes:
    | NexusGenTypes["allInputTypes"]
    | NexusGenTypes["allOutputTypes"];
  abstractTypes: NexusGenTypes["interfaceNames"] | NexusGenTypes["unionNames"];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginSchemaConfig {}
}
