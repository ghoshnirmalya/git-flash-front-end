{"version":3,"file":"dashboard.js","sources":["../pages/api/graphql/index.ts"],"sourcesContent":["import { makeSchema, objectType, stringArg } from \"@nexus/schema\";\nimport { PrismaClient } from \"@prisma/client\";\nimport { ApolloServer } from \"apollo-server-micro\";\nimport path from \"path\";\n\nconst prisma = new PrismaClient();\n\nconst User = objectType({\n  name: \"User\",\n  definition(t) {\n    t.string(\"id\");\n    t.string(\"email\");\n  },\n});\n\nconst Site = objectType({\n  name: \"Site\",\n  definition(t) {\n    t.string(\"id\");\n    t.string(\"name\");\n  },\n});\n\nconst Page = objectType({\n  name: \"Page\",\n  definition(t) {\n    t.string(\"id\");\n    t.string(\"url\");\n    t.string(\"siteId\");\n    t.field(\"screenshots\", {\n      type: \"Screenshot\",\n      nullable: true,\n      resolve: (parent) =>\n        prisma.screenshot.findOne({\n          where: { id: parent.id },\n        }),\n    });\n  },\n});\n\nconst Screenshot = objectType({\n  name: \"Screenshot\",\n  definition(t) {\n    t.string(\"id\");\n    t.string(\"image\");\n    t.string(\"pageId\");\n  },\n});\n\nconst Query = objectType({\n  name: \"Query\",\n  definition(t) {\n    // t.field(\"site\", {\n    //   type: \"Site\",\n    // });\n    // t.list.field(\"feed\", {\n    //   type: \"Post\",\n    //   resolve: (_parent, _args, ctx) => {\n    //     return prisma.post.findMany({\n    //       where: { published: true },\n    //     });\n    //   },\n    // });\n    // t.list.field(\"drafts\", {\n    //   type: \"Post\",\n    //   resolve: (_parent, _args, ctx) => {\n    //     return prisma.post.findMany({\n    //       where: { published: false },\n    //     });\n    //   },\n    // });\n    // t.list.field(\"filterPosts\", {\n    //   type: \"Post\",\n    //   args: {\n    //     searchString: stringArg({ nullable: true }),\n    //   },\n    //   resolve: (_, { searchString }, ctx) => {\n    //     return prisma.post.findMany({\n    //       where: {\n    //         OR: [\n    //           { title: { contains: searchString } },\n    //           { content: { contains: searchString } },\n    //         ],\n    //       },\n    //     });\n    //   },\n    // });\n  },\n});\n\n// const Mutation = objectType({\n//   name: \"Mutation\",\n//   definition(t) {\n//     t.field(\"signupUser\", {\n//       type: \"User\",\n//       args: {\n//         name: stringArg(),\n//         email: stringArg({ nullable: false }),\n//       },\n//       resolve: (_, { name, email }, ctx) => {\n//         return prisma.user.create({\n//           data: {\n//             name,\n//             email,\n//           },\n//         });\n//       },\n//     });\n\n//     t.field(\"deletePost\", {\n//       type: \"Post\",\n//       nullable: true,\n//       args: {\n//         postId: stringArg(),\n//       },\n//       resolve: (_, { postId }, ctx) => {\n//         return prisma.post.delete({\n//           where: { id: Number(postId) },\n//         });\n//       },\n//     });\n\n//     t.field(\"createDraft\", {\n//       type: \"Post\",\n//       args: {\n//         title: stringArg({ nullable: false }),\n//         content: stringArg(),\n//         authorEmail: stringArg(),\n//       },\n//       resolve: (_, { title, content, authorEmail }, ctx) => {\n//         return prisma.post.create({\n//           data: {\n//             title,\n//             content,\n//             published: false,\n//             author: {\n//               connect: { email: authorEmail },\n//             },\n//           },\n//         });\n//       },\n//     });\n\n//     t.field(\"publish\", {\n//       type: \"Post\",\n//       nullable: true,\n//       args: {\n//         postId: stringArg(),\n//       },\n//       resolve: (_, { postId }, ctx) => {\n//         return prisma.post.update({\n//           where: { id: Number(postId) },\n//           data: { published: true },\n//         });\n//       },\n//     });\n//   },\n// });\n\nexport const schema = makeSchema({\n  types: [\n    Query,\n    // Mutation,\n    User,\n    Site,\n    Page,\n    Screenshot,\n  ],\n  outputs: {\n    typegen: path.join(\n      process.cwd(),\n      \"pages\",\n      \"api\",\n      \"graphql\",\n      \"nexus-typegen.ts\"\n    ),\n    schema: path.join(\n      process.cwd(),\n      \"pages\",\n      \"api\",\n      \"graphql\",\n      \"schema.graphql\"\n    ),\n  },\n});\n\nexport const config = {\n  api: {\n    bodyParser: false,\n  },\n};\n\nexport default new ApolloServer({ schema }).createHandler({\n  path: \"/api\",\n});\n"],"names":["prisma","PrismaClient","User","objectType","name","definition","t","string","Site","Page","field","type","nullable","resolve","parent","screenshot","findOne","where","id","Screenshot","Query","schema","makeSchema","types","outputs","typegen","path","join","process","cwd","config","api","bodyParser","ApolloServer","createHandler"],"mappings":";;;;;;;AAKA,IAAMA,MAAM,GAAG,IAAIC,mBAAJ,EAAf;AAEA,IAAMC,IAAI,GAAGC,mBAAU,CAAC;AACtBC,EAAAA,IAAI,EAAE,MADgB;AAEtBC,EAAAA,UAFsB,sBAEXC,CAFW;AAGpBA,IAAAA,CAAC,CAACC,MAAF,CAAS,IAAT;AACAD,IAAAA,CAAC,CAACC,MAAF,CAAS,OAAT;AACD;AALqB,CAAD,CAAvB;AAQA,IAAMC,IAAI,GAAGL,mBAAU,CAAC;AACtBC,EAAAA,IAAI,EAAE,MADgB;AAEtBC,EAAAA,UAFsB,sBAEXC,CAFW;AAGpBA,IAAAA,CAAC,CAACC,MAAF,CAAS,IAAT;AACAD,IAAAA,CAAC,CAACC,MAAF,CAAS,MAAT;AACD;AALqB,CAAD,CAAvB;AAQA,IAAME,IAAI,GAAGN,mBAAU,CAAC;AACtBC,EAAAA,IAAI,EAAE,MADgB;AAEtBC,EAAAA,UAFsB,sBAEXC,CAFW;AAGpBA,IAAAA,CAAC,CAACC,MAAF,CAAS,IAAT;AACAD,IAAAA,CAAC,CAACC,MAAF,CAAS,KAAT;AACAD,IAAAA,CAAC,CAACC,MAAF,CAAS,QAAT;AACAD,IAAAA,CAAC,CAACI,KAAF,CAAQ,aAAR,EAAuB;AACrBC,MAAAA,IAAI,EAAE,YADe;AAErBC,MAAAA,QAAQ,EAAE,IAFW;AAGrBC,MAAAA,OAAO,EAAE,iBAACC,MAAD;AAAA,eACPd,MAAM,CAACe,UAAP,CAAkBC,OAAlB,CAA0B;AACxBC,UAAAA,KAAK,EAAE;AAAEC,YAAAA,EAAE,EAAEJ,MAAM,CAACI;AAAb;AADiB,SAA1B,CADO;AAAA;AAHY,KAAvB;AAQD;AAdqB,CAAD,CAAvB;AAiBA,IAAMC,UAAU,GAAGhB,mBAAU,CAAC;AAC5BC,EAAAA,IAAI,EAAE,YADsB;AAE5BC,EAAAA,UAF4B,sBAEjBC,CAFiB;AAG1BA,IAAAA,CAAC,CAACC,MAAF,CAAS,IAAT;AACAD,IAAAA,CAAC,CAACC,MAAF,CAAS,OAAT;AACAD,IAAAA,CAAC,CAACC,MAAF,CAAS,QAAT;AACD;AAN2B,CAAD,CAA7B;AASA,IAAMa,KAAK,GAAGjB,mBAAU,CAAC;AACvBC,EAAAA,IAAI,EAAE,OADiB;AAEvBC,EAAAA,UAFuB,sBAEZC,CAFY;AAIrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AAtCsB,CAAD,CAAxB;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEae,MAAM,GAAGC,mBAAU,CAAC;AAC/BC,EAAAA,KAAK,EAAE,CACLH,KADK;AAGLlB,EAAAA,IAHK,EAILM,IAJK,EAKLC,IALK,EAMLU,UANK,CADwB;AAS/BK,EAAAA,OAAO,EAAE;AACPC,IAAAA,OAAO,EAAEC,IAAI,CAACC,IAAL,CACPC,OAAO,CAACC,GAAR,EADO,EAEP,OAFO,EAGP,KAHO,EAIP,SAJO,EAKP,kBALO,CADF;AAQPR,IAAAA,MAAM,EAAEK,IAAI,CAACC,IAAL,CACNC,OAAO,CAACC,GAAR,EADM,EAEN,OAFM,EAGN,KAHM,EAIN,SAJM,EAKN,gBALM;AARD;AATsB,CAAD;IA2BnBC,MAAM,GAAG;AACpBC,EAAAA,GAAG,EAAE;AACHC,IAAAA,UAAU,EAAE;AADT;AADe;AAMtB,YAAe,IAAIC,8BAAJ,CAAiB;AAAEZ,EAAAA,MAAM,EAANA;AAAF,CAAjB,EAA6Ba,aAA7B,CAA2C;AACxDR,EAAAA,IAAI,EAAE;AADkD,CAA3C,CAAf;;;;;;"}